stages:
  - prepare
  - build
  - linting
  - test
  - publish
  - pages

build-base:
  stage: prepare
  image: docker:stable
  services:
  - docker:dind
  script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker build --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA -f ./docker/ubuntu_20_04_base .
  - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

build-no-idg:
  stage: build
  needs: ["build-base"]
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  before_script:
    - rm -r /usr/lib/cmake/*idg*
    - rm -r /usr/lib/cmake/*IDGAPITargets*
    - rm -r /usr/lib/*idg*
  script:
    - mkdir build
    - cd build
    - cmake -G Ninja ..
    - ninja
  only:
    variables:
      - $CI_SERVER_HOST == "git.astron.nl"

build-debug:
  stage: build
  needs: ["build-base"]
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  script:
    - mkdir build && cd build
    - cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-coverage" -DCMAKE_EXE_LINKER_FLAGS="-coverage" ..
    - ninja
    - ninja install
  artifacts:
    paths:
      - build

build-lofar-release:
  stage: build
  image: docker:stable
  services:
  - docker:dind
  needs: ["build-base"]
  script:
  - docker build --build-arg BASE_TAG=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA --tag dppp_lofar:${CI_COMMIT_SHORT_SHA} -f ./docker/ubuntu_20_04_lofar .

build-doc:
  stage: build
  image: docker:stable
  needs: []
  before_script:
  - apk update
  - apk add doxygen cmake ninja python3 py3-pip
  - python3 -m pip install --user --upgrade pip
  - python3 -m pip install autosemver==0.5.5 jsonschema2rst sphinx sphinx-rtd-theme
  script:
  - mkdir build && cd build
  - cmake -G Ninja ../docs
  - ninja doc userdoc
  artifacts: # Only for master the docs are published; for branches it may be useful to browse the artifacts
    paths:
    - build/docs
  only:
    variables:
      - $CI_SERVER_HOST == "git.astron.nl"

linting:
  stage: linting
  needs: ["build-base"]
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  before_script:
    - pip3 install clang-format==9.0.0
  script:
    - ./scripts/run-clang-format.sh

unit-test:
  stage: test
  needs: ["build-debug"]
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  before_script:
    - pip3 install gcovr
  script:
    - cd build
    - ninja # Needed when ran on different containers with different timestamps
    - ctest -j$(($(nproc)/2 > 0 ? $(nproc)/2:1)) -L unit |& tee ctest.out
    # Check if ctest found any tests. ctest >= 3.18 has a --no-tests=error
    # option. Older versions require a manual check.
    - if grep -q 'No tests were found' ctest.out; then exit 1; fi
    - gcovr -j$(($(nproc)/2 > 0 ? $(nproc)/2:1)) -r ../ -e '.*/external/.*' -e '.*/test/.*' -e '.*/CompilerIdCXX/.*' -e '.*/Common/.*'
    - gcovr -j$(($(nproc)/2 > 0 ? $(nproc)/2:1)) -r ../ -e '.*/external/.*' -e '.*/test/.*' -e '.*/CompilerIdCXX/.*' -e '.*/Common/.*' --json -o run-unit.json
  artifacts:
    paths: 
      - build/run-unit.json
      - build/unittests.xml
    reports:
      junit: build/unittests.xml


integration-test:
  stage: test
  needs: ["build-debug"]
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  before_script:
    - pip3 install gcovr h5py
  script:
    - cd build
    - ninja # Needed when ran on different containers with different timestamps
    - ctest -j$(($(nproc)/2 > 0 ? $(nproc)/2:1)) -L integration |& tee ctest.out
    # Check if ctest found any tests. ctest >= 3.18 has a --no-tests=error
    # option. Older versions require a manual check.
    - if grep -q 'No tests were found' ctest.out; then exit 1; fi
    - gcovr -j$(($(nproc)/2 > 0 ? $(nproc)/2:1)) -r ../ -e '.*/external/.*' -e '.*/test/.*' -e '.*/CompilerIdCXX/.*' -e '.*/Common/.*' --json -o run-integration.json
  artifacts:
    paths: 
      - build/run-integration.json

publish-doc:
  stage: publish
  image: docker:stable
  needs: ["build-doc"]
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | base64 -d | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H dop288 > ~/.ssh/known_hosts
  script:
    - scp -r build/docs/* citt@dop288:DP3/
  only:
    variables:
      - $CI_SERVER_HOST == "git.astron.nl"
    refs:
      - master

pages:
  stage: pages
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  needs: ["build-debug", "unit-test", "integration-test"]
  before_script:
    - apt-get update
    - apt-get -y install curl
    - pip3 install gcovr
  script:
    - mkdir -p .public/build/reports
    - cd .public
    - gcovr -j$(($(nproc)/2 > 0 ? $(nproc)/2:1)) -r ../ -a ../build/run-integration.json -a ../build/run-unit.json --xml -o build/reports/code-coverage.xml
    - gcovr -j$(($(nproc)/2 > 0 ? $(nproc)/2:1)) -r ../ -a ../build/run-integration.json -a ../build/run-unit.json --html --html-details -o index.html
    - cp ../build/unittests.xml build/reports/unit-tests.xml
    # Create and upload GitLab badges
    - chmod -R 700 ../CI
    - python3 ../CI/.produce-ci-metrics.py build/reports > ci-metrics.json
    - sh ../CI/ci-badges-func.sh
    - cd ..
    - mv .public public
  artifacts:
    paths:
      - public
    reports:
      cobertura: public/build/reports/code-coverage.xml
